import requests
from bs4 import BeautifulSoup
import pandas as pd
import time
import csv
import random

class Mathweb():
    def __init__(self):
        self.headers = {
            'Accept':'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
            'Accept-Encoding':'gzip, deflate',
            'Accept-Language':'zh-CN,zh;q=0.9',
            'Cache-Control':'max-age=0',
            'Connection':'keep-alive',
            'Content-Length':'28890',
            'Content-Type':'application/x-www-form-urlencoded',
            #'Cookie':'__guid=255601934.1721436877996193000.1581038258040.2583; __utmz=15208169.1581038261.1.1.utmcsr=(direct)|utmccn=(direct)|utmcmd=(none); ASP.NET_SessionId=mp3zd5553nv4vgmfml2l4k45; __utmc=15208169; matweb5=%2bUJPzF1I2OU%3d=p0D1DRyWP6o%3d&LanguageID=1&CookieID=92002bfe169142a99efc9d5245496426&SearchResultsPerPage=50; __utma=15208169.471650784.1581038261.1581225875.1581247808.6; __utmt=1; monitor_count=31; __utmb=15208169.2.10.1581247808',
            'Host':'www.matweb.com',
            'Origin':'http://www.matweb.com',
            'Referer':'http://www.matweb.com/search/PropertySearch.aspx',
            'Upgrade-Insecure-Requests':'1',
            'User-Agent':'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.132 Safari/537.36'
            }
        self.url = 'http://www.matweb.com/search/PropertySearch.aspx'
        self.links = []
    
    def get_proxies(self):
        url = 'https://www.xicidaili.com/nn/'
        headers = {'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.106 Safari/537.36'}
        r = requests.get(url,headers=headers)
        soup = BeautifulSoup(r.text,'lxml')
        ips = []
        trs = soup.find_all('tr',class_='odd')
        for tr in trs:
            ip = tr.find_all('td')[1].text
            port = tr.find_all('td')[2].text
            ips.append(ip+':'+port)
        proxy = {'http':'http://'+random.choice(ips)}
        return proxy
        

    
    def get_data(self):
        #result_df = []
        for i in range(8,9):
            time.sleep(5)
            data = data = {
        '__EVENTTARGET':'ctl00$ContentMain$UcSearchResults1$lnkNextPage',
    'ctl00_ContentMain_ucMatGroupTree_LODCS1_msTreeView_ExpandState':'ccccccnc',
    '__VIEWSTATE':'',
    '__VIEWSTATEGENERATOR':'42B37C8E',
    'ctl00$ContentMain$txtMatGroupID':'9',
    'ctl00$ContentMain$txtMatGroupText':'Metal (17052 matls)',
    'ctl00$ContentMain$ucPropertyDropdown1$drpPropertyList':'743',
    'ctl00$ContentMain$ucPropertyEdit1$txtpMin':'0',
    'ctl00$ContentMain$ucPropertyEdit1$dropPropUOMID':'156',
    'ctl00$ContentMain$ucPropertyDropdown2$drpPropertyList':'745',
    'ctl00$ContentMain$ucPropertyEdit2$txtpMin':'0',
    'ctl00$ContentMain$ucPropertyEdit2$dropPropUOMID':'108',
    'ctl00$ContentMain$ucPropertyDropdown3$drpPropertyList':'263',
    'ctl00$ContentMain$ucPropertyEdit3$txtpMin':'0',
    'ctl00$ContentMain$ucPropertyEdit3$dropPropUOMID':'137',
    'ctl00$ContentMain$UcSearchResults1$drpPageSelect1':str(i),
    'ctl00$ContentMain$UcSearchResults1$drpPageSize1':'50',
    'ctl00$ContentMain$UcSearchResults1$drpFolderList':'0',
    'ctl00$ContentMain$UcSearchResults1$txtFolderMatCount':'0/3',
    'ctl00$ContentMain$UcSearchResults1$drpFolderAction':'0',
    'ctl00$ContentMain$UcSearchResults1$drpPageSelect2':str(i),
    'ctl00$ContentMain$UcSearchResults1$drpPageSize2':'50'
    }
            r=  requests.post(self.url,headers=self.headers,data=data)
            soup = BeautifulSoup(r.text,'lxml')
            trs = soup.find('table',class_='tabledataformat t_ablegrid').find_all('tr')
            del trs[0]
        

            for tr in trs:
                time.sleep(10)
                name = tr.find('a').text
                link = 'http://www.matweb.com' + tr.find('a')['href']
                print(name)
                headers = {'User-Agent':'Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/63.0.3239.132 Safari/537.36'}
            
                proxies = self.get_proxies()
                r = requests.get(link,headers=headers,proxies=proxies)
                soup = BeautifulSoup(r.text,'lxml')
                trs = soup.find('div',attrs={'id':'ctl00_ContentMain_ucDataSheet1_pnlMaterialData'}).find_all('table')[2]
                data11 = []
                records = []
                k = 0
                for tr in trs:
                    info = []
                    try:
                        tds = tr.find_all('td')
                    except:
                        continue
                    if len(tds)==0:
                        tds = tr.find_all('th')
                    elif len(tds)!=4 and len(tds)!=0:
                        continue
                    for td in tds:
                        print(td.text)
                        info.append(td.text.strip())
                    data11.append(info)
                    if 'Tensile Strength, Ultimate' in info:
                        records.append(k)
                    if 'Tensile Strength, Yield' in info:
                        records.append(k)
                    if 'Elongation at Break' in info:
                        records.append(k)
                    if 'Component Elements Properties' in info:
                        records.append(k)
                    k = k + 1
                
                nn = records[-1]+1
                length = len(data11[nn:])
                title = soup.find('div',attrs={'id':'ctl00_ContentMain_ucDataSheet1_pnlMaterialData'}).find('table').find('th').text.strip()
                titles = [title]*length
                t_ultimates = [data11[records[0]]]*length
                t_yields = [data11[records[1]]]*length
                e_breaks = [data11[records[2]]]*length
                components = data11[records[-1]+1:]
                
                f=open('D:/test/Mathweb'+str(i)+'.csv','a',encoding='utf-8',newline='')
                writer=csv.writer(f)
                for ii in range(len(titles)):
                    writer.writerow((titles[ii],components[ii],t_ultimates[ii],t_yields[ii],e_breaks[ii]))
                f.close()
                
                #df = pd.DataFrame([titles,components,t_ultimates,t_yields,e_breaks])
                #df = df.T

                #result_df.append(df)
            
        #result = pd.concat(result_df)
        #result.to_excel('Mathweb'+str(i)+'.xlsx',index=None)
        
mathweb = Mathweb()
mathweb.get_data()