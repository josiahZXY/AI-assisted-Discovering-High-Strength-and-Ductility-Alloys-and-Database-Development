import requests
import openpyxl
from lxml import etree
from copy import deepcopy


def write_excel_xlsx(path, sheet_name, value):
	index = len(value)
	workbook = openpyxl.Workbook()
	sheet = workbook.active
	sheet.title = sheet_name
	for i in range(0, index):
		for j in range(0, len(value[i])):
			sheet.cell(row=i + 1, column=j + 1, value=str(value[i][j]))
	workbook.save(path)
	print("xlsx格式表格写入数据成功！")

def read_excel_xlsx(path, sheet_name):
	workbook = openpyxl.load_workbook(path)
	# sheet = wb.get_sheet_by_name(sheet_name)这种方式已经弃用，不建议使用
	sheet = workbook[sheet_name]
	for row in sheet.rows:
		for cell in row:
			print(cell.value, "\t", end="")

def save_data(excel_name, data_list):
	book_name_xlsx = excel_name + '.xlsx'
	
	sheet_name_xlsx = 'matweb数据'
	# # save_data([[title, types, name, metric, english, comments]], '结果集')
	excel_title = ["title", "types", "name", "metric","english","comments"]
	write_data = deepcopy(data_list)
	write_data.insert(0, excel_title)
	write_excel_xlsx(book_name_xlsx, sheet_name_xlsx, write_data)
	read_excel_xlsx(book_name_xlsx, sheet_name_xlsx)

def detaile_spider(data_list):
	print(data_list)
	detaile_headers = {'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3',
	'Accept-Encoding':'gzip, deflate',
	'Accept-Language': 'en-GB,en-US;q=0.9,en;q=0.8,zh-CN;q=0.7,zh;q=0.6',
	'Cache-Control': 'max-age=0',
	'Connection': 'keep-alive',
	'Cookie': 'matweb5=%2bUJPzF1I2OU%3d=%2bRMOokPN1rM%3d&LanguageID=1&CookieID=98ff67d4ba2042b69c9707d8f8672d9f&SearchResultsPerPage=50; __utmz=15208169.1580816734.1.1.utmcsr=(direct)|utmccn=(direct)|utmcmd=(none); ASP.NET_SessionId=wfkcs255nc0h1t3k3s1loh45; __utmc=15208169; __utma=15208169.1785664677.1580816734.1580883671.1580893523.5; __utmt=1; __utmb=15208169.1.10.1580893523',
	'Host': 'www.matweb.com',
	'Referer': 'http://www.matweb.com/search/PropertySearch.aspx',
	'Upgrade-Insecure-Requests': '1',
	'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.100 Safari/537.36'}
	result_data = []
	for i in data_list:
		title = i[0]
		detaile_url = i[1]
		res = requests.get(url=detaile_url , headers=detaile_headers)
		html = etree.HTML(res.text)
		mechanical_properties = []
		trs = html.xpath('//th[text()="Mechanical Properties"]/ancestor::tr/following-sibling::tr')
		for tr in trs:
			if tr.xpath('./@class'):
				mechanical_properties.append(tr)
			else:
				break
		component_elements_properties = []
		trs = html.xpath('//th[text()="Component Elements Properties"]/ancestor::tr/following-sibling::tr')
		for tr in trs:
			if tr.xpath('./@class'):
				component_elements_properties.append(tr)
			else:
				break
		for i in mechanical_properties:
			types = 'Mechanical Properties'
			name = ''.join(i.xpath('./td[1]//text()')).strip()
			metric = ''.join(i.xpath('./td[2]//text()')).strip()
			english = ''.join(i.xpath('./td[3]//text()')).strip()
			comments = ''.join(i.xpath('./td[4]//text()')).strip()
			result_data.append([title, types, name, metric, english, comments])
		for i in component_elements_properties:
			types = 'Component Elements Properties'
			name = ''.join(i.xpath('./td[1]//text()')).strip()
			metric = ''.join(i.xpath('./td[2]//text()')).strip()
			english = ''.join(i.xpath('./td[3]//text()')).strip()
			comments = ''.join(i.xpath('./td[4]//text()')).strip()
			result_data.append([title, types, name, metric, english, comments])
		# print(result_data)
		print('-----------------')
	save_data('结果集',result_data)

def start_spider():
	url2 = 'http://www.matweb.com/search/PropertySearch.aspx'
	headers = {
		'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3',
		'Accept-Encoding': 'gzip, deflate',
		'Accept-Language': 'en-GB,en-US;q=0.9,en;q=0.8,zh-CN;q=0.7,zh;q=0.6',
		'Cache-Control': 'max-age=0',
		'Connection': 'keep-alive',
		'Content-Length': '28444',
		'Content-Type': 'application/x-www-form-urlencoded',
		'Cookie': '__utmz=15208169.1580816734.1.1.utmcsr=(direct)|utmccn=(direct)|utmcmd=(none); ASP.NET_SessionId=wfkcs255nc0h1t3k3s1loh45; __utmc=15208169; matweb5=%2bUJPzF1I2OU%3d=%2bRMOokPN1rM%3d&LanguageID=1&CookieID=98ff67d4ba2042b69c9707d8f8672d9f&SearchResultsPerPage=200; __utma=15208169.1785664677.1580816734.1580900951.1580960460.7; __utmb=15208169.5.10.1580960460',
		'Host': 'www.matweb.com',
		'Origin': 'http://www.matweb.com',
		'Referer': 'http://www.matweb.com/search/PropertySearch.aspx',
		'Upgrade-Insecure-Requests': '1',
		'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3770.100 Safari/537.36'}
	data_list = []
	
	for i in range(1,3):
		data = {'__EVENTTARGET': 'ctl00$ContentMain$UcSearchResults1$lnkNextPage2',
				'__EVENTARGUMENT': '',
				'__LASTFOCUS': '',
				'ctl00_ContentMain_ucMatGroupTree_LODCS1_msTreeView_ExpandState': 'ccccccnc',
				'ctl00_ContentMain_ucMatGroupTree_LODCS1_msTreeView_SelectedNode': '',
				'ctl00_ContentMain_ucMatGroupTree_LODCS1_msTreeView_PopulateLog': '',
				# '__VIEWSTATE': '',
				'__VIEWSTATEGENERATOR': '42B37C8E',
				'ctl00$txtQuickText': '',
				'ctl00$ContentMain$ucModalPopup1$hndPopupControl': '',
				'ctl00$ContentMain$txtMatGroupID': '9',
				'ctl00$ContentMain$txtMatGroupText': 'Metal (17052 matls)',
				'ctl00$ContentMain$btnSubmit.x': '12',
				'ctl00$ContentMain$btnSubmit.y': '18',
				'ctl00$ContentMain$ucPropertyDropdown1$drpPropertyList': '263',
				'ctl00$ContentMain$ucPropertyEdit1$txtpMin': '0',
				'ctl00$ContentMain$ucPropertyEdit1$txtpMax': '',
				'ctl00$ContentMain$ucPropertyEdit1$dropPropUOMID': '137',
				'ctl00$ContentMain$ucPropertyDropdown2$drpPropertyList': '743',
				'ctl00$ContentMain$ucPropertyEdit2$txtpMin': '0',
				'ctl00$ContentMain$ucPropertyEdit2$txtpMax': '',
				'ctl00$ContentMain$ucPropertyEdit2$dropPropUOMID': '108',
				'ctl00$ContentMain$ucPropertyDropdown3$drpPropertyList': '745',
				'ctl00$ContentMain$ucPropertyEdit3$txtpMin': '0',
				'ctl00$ContentMain$ucPropertyEdit3$txtpMax': '',
				'ctl00$ContentMain$ucPropertyEdit3$dropPropUOMID': '108',
				'ctl00$ContentMain$UcSearchResults1$drpPageSelect1': '%s'%str(i),
				'ctl00$ContentMain$UcSearchResults1$drpPageSize1': '200',
				'ctl00$ContentMain$UcSearchResults1$drpFolderList': '0',
				'ctl00$ContentMain$UcSearchResults1$txtFolderMatCount': '0/0',
				'ctl00$ContentMain$UcSearchResults1$drpPageSelect2': '%s'%str(i),
				'ctl00$ContentMain$UcSearchResults1$drpPageSize2': '200'}
		
	
		res2 = requests.post(url=url2, headers=headers, data=data)
		html = etree.HTML(res2.text)
		lis = html.xpath('//table[@class="tabledataformat t_ablegrid"]/tr[position()>1]//td[3]/a')
		set_list =[]
		for li in lis:
			title = li.xpath('./text()')[0]
			url = 'http://www.matweb.com/' + li.xpath('./@href')[0]
			data_list.append((title, url))
			set_list.append(title)
		
		print('----------完成一页的抓取----------')
	print('----------------完成所有列表页的获取----开始抓取详情页----------')
	detaile_spider(data_list)
	
	
if __name__=='__main__':
	start_spider()